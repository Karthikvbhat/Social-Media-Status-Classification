# -*- coding: utf-8 -*-
"""Karthik_Major Project_karthikvbalnadu@gmail.com

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTCNRPKrPcnbVtGFeXjmbfT_cROhakBC
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

df = pd.read_csv('Live.csv')

df.head()

df.tail()

df.shape

df.info()

df.isnull().sum()

df.describe()

df.drop(['Column1', 'Column2', 'Column3', 'Column4'], axis=1, inplace=True)

df_dup = df.duplicated().any()
print(df_dup)

df = df.drop_duplicates()

df.shape

df.describe()

sns.pairplot(df)

df.drop(['status_id','status_published'], axis=1, inplace=True)

import matplotlib.pyplot as plt
plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_reactions'],
        color='green')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("reaction",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of reaction', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_comments'],
        color='blue')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("comments",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of comments', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_shares'],
        color='yellow')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("shares",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of shares', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_likes'],
        color='red')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("likes",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of likes', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_loves'],
        color='blue')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("loves",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of loves', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_wows'],
        color='pink')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("wows",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of wows', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_hahas'],
        color='black')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("hahas",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of hahas', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_sads'],
        color='green')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("sads",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of sads', size =25 ,color ='Brown')

plt.figure(figsize=(10,8))
plt.bar(x=df['status_type'],
        height=df['num_angrys'],
        color='red')
plt.xlabel("status",size=20,color='Brown')
plt.ylabel("angrys",size=20,color='Brown')
plt.xticks(rotation=90)
plt.title('num of angrys', size =25 ,color ='Brown')

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_reactions']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_reactions",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_comments']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_comments",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_shares']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_shares",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_likes']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_likes",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_loves']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_loves",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_wows']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_wows",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_hahas']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_hahas",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_sads']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_sads",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

fig,ax=plt.subplots(figsize=(10,8))
x= df['status_type']
y=df['num_angrys']
plt.xticks(rotation=90)
plt.xlabel("status_type",size=30,color='#BC8F8F')
plt.ylabel("num_angrys",size=30,color='#BC8F8F')
plt.scatter(x,y)
plt.show()

df.info()

x = df.drop("status_type", axis=1)
y = df["status_type"]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
print(x.shape, x_train.shape, x_test.shape)

print(y.shape, y_train.shape, y_test.shape)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, train_size=0.8, random_state=50)
print("shape of x_train=", x_train.shape)
print("shape of y_train=", y_train.shape)
print("shape of x_test=", x_test.shape)
print("shape of y_test=", y_test.shape)

x_train

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, train_size = 0.7, random_state=50)

x_train

rfc = RandomForestClassifier()

rfc.fit(x_train, y_train.values.ravel())

prediction = rfc.predict(x_test)
prediction

Accuracy = accuracy_score(y_test,prediction)

print(Accuracy*100)

y_predict = rfc.predict(x_test)

cm =confusion_matrix(y_test,y_predict)

cm

plt.figure(figsize=(10,7))
sns.heatmap(cm,annot = True)

print(classification_report(y_test, pred))

input_data = (16,4,15,545,65,54,150,839,6999)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction =rfc.predict(input_data_reshaped)
print(prediction)